<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hielectro.welpair.member.model.dao.MemberMapper">

    <resultMap type="com.hielectro.welpair.member.model.dto.MemberDTO" id="memberResultMap">
        <id property="empNo" column="EMP_NO"/>
        <result property="memPwd" column="MEM_PWD"/>
        <result property="registDate" column="REGIST_DATE"/>
        <result property="pointBalance" column="POINT_BALANCE"/>
        <result property="memAuth" column="MEM_AUTH"/>
    </resultMap>
    <select id="checkoutMemberById" resultMap="memberResultMap">
        SELECT * FROM T_MEMBER
        WHERE EMP_NO = #{empNo}
    </select>


    <!-- 회원조회   -->
    <resultMap id="memberListResultMap" type="com.hielectro.welpair.member.model.dto.MemberDTO">
        <id property="empNo" column="EMP_NO"/>
        <result property="memPwd" column="MEM_PWD"/>
        <result property="registDate" column="REGIST_DATE"/>
        <result property="pointBalance" column="POINT_BALANCE"/>
        <result property="memAuth" column="MEM_AUTH"/>
        <result property="isActivated" column="IS_ACTIVATED"/>
        <association property="employee" javaType="com.hielectro.welpair.member.model.dto.EmployeeDTO">
            <result property="empNo" column="EMP_NO"/>
            <result property="empName" column="EMP_NAME"/>
            <result property="empEmail" column="EMP_EMAIL"/>
            <result property="empPhone" column="EMP_PHONE"/>
            <result property="isExpire" column="IS_EXPIRE"/>
            <result property="hireDate" column="HIRE_DATE"/>
            <result property="yearCount" column="YEAR_COUNT"/>

            <association property="deptDTO" javaType="com.hielectro.welpair.member.model.dto.DeptDTO">
                <result property="deptName" column="DEPT_NAME"/>
            </association>
            <association property="jobDTO" javaType="com.hielectro.welpair.member.model.dto.JobDTO">
                <result property="jobName" column="JOB_NAME"/>
            </association>
        </association>
    </resultMap>
    <!--  회원등록(직원목록)  -->
    <resultMap id="employeeListResultMap" type="com.hielectro.welpair.member.model.dto.EmployeeDTO">
        <id property="empNo" column="EMP_NO"/>
        <result property="hireDate" column="HIRE_DATE"/>
        <result property="empName" column="EMP_NAME"/>
        <result property="empEmail" column="EMP_EMAIL"/>
        <result property="empPhone" column="EMP_PHONE"/>
        <result property="isExpire" column="IS_EXPIRE"/>
        <association property="memberDTO" javaType="com.hielectro.welpair.member.model.dto.MemberDTO">
            <result property="registDate" column="REGIST_DATE"/>
        </association>
        <association property="deptDTO" javaType="com.hielectro.welpair.member.model.dto.DeptDTO">
            <result property="deptName" column="DEPT_NAME"/>
        </association>
        <association property="jobDTO" javaType="com.hielectro.welpair.member.model.dto.JobDTO">
            <result property="jobName" column="JOB_NAME"/>
        </association>
    </resultMap>
    <!-- 가입승인(가입요청목록) -->
    <resultMap id="reqListResultMap" type="com.hielectro.welpair.member.model.dto.MemberDTO">
        <result property="empNo" column="EMP_NO"/>
        <result property="registDate" column="REGIST_DATE"/>
        <association property="employee" javaType="com.hielectro.welpair.member.model.dto.EmployeeDTO">
            <result property="empName" column="EMP_NAME"/>
            <result property="empEmail" column="EMP_EMAIL"/>
        </association>
    </resultMap>

    <!-- 포인트지급이력(요약,상세) -->
    <resultMap id="pointHistoryResultMap" type="com.hielectro.welpair.member.model.dto.PointHistoryDTO">
        <id property="pointNo" column="POINT_NO"/>
        <result property="empNo" column="EMP_NO"/>
        <result property="pointDate" column="POINT_DATE"/>
        <result property="pointAmount" column="POINT_AMOUNT"/>
        <result property="pointType" column="POINT_TYPE"/>
        <result property="pointReason" column="POINT_REASON"/>
        <result property="eventId" column="EVENT_ID"/>
        <result property="pointDate2" column="POINT_DATE2"/>
        <result property="pointCount" column="POINT_COUNT"/>
        <result property="pointTotal" column="POINT_TOTAL"/>
        <association property="employeeDTO" javaType="com.hielectro.welpair.member.model.dto.EmployeeDTO">
            <result property="empName" column="EMP_NAME"/>
            <result property="yearCount" column="YEAR_COUNT"/>
        </association>
        <association property="deptDTO" javaType="com.hielectro.welpair.member.model.dto.DeptDTO">
            <result property="deptName" column="DEPT_NAME"/>
        </association>
        <association property="jobDTO" javaType="com.hielectro.welpair.member.model.dto.JobDTO">
            <result property="jobName" column="JOB_NAME"/>
        </association>
    </resultMap>


    <!-- 1. 페이징처리하여 보여줄 회원목록-->
    <select id="getMemberList" resultMap="memberListResultMap">
        SELECT *
        FROM (SELECT rownum AS rnum
        , M.EMP_NO
        , M.MEM_PWD
        , M.REGIST_DATE
        , M.POINT_BALANCE
        , E.EMP_NAME
        , E.EMP_EMAIL
        , E.EMP_PHONE
        , E.IS_EXPIRE
        , M.IS_ACTIVATED
        FROM T_MEMBER M
        JOIN T_EMPLOYEE E ON (M.EMP_NO = E.EMP_NO)
        WHERE M.IS_ACTIVATED = 'Y'
        <if test='isExpired != null and isExpired.equals(1)'>
            AND E.IS_EXPIRE = 'Y'
        </if>
        )
        WHERE rnum BETWEEN #{startRow} AND #{endRow}
        ORDER BY REGIST_DATE DESC
    </select>


    <!-- 전체회원수, 퇴사회원수 조회 -->
<!--    <select id="totalMemberCount" resultType="_int" parameterType="hashmap">-->
<!--        SELECT COUNT(*)-->
<!--        FROM T_MEMBER M-->
<!--        WHERE M.IS_ACTIVATED = 'Y'-->
<!--    </select>-->
<!--    <select id="expiredMemberCount" resultType="_int" parameterType="hashmap">-->
<!--        SELECT COUNT(*)-->
<!--        FROM T_MEMBER M-->
<!--                 JOIN T_EMPLOYEE E on M.EMP_NO = E.EMP_NO-->
<!--        WHERE E.IS_EXPIRE = 'Y' AND M.IS_ACTIVATED = 'Y'-->
<!--    </select>-->

    <select id="totalMemberCount" resultType="_int">
        SELECT COUNT(*)
        FROM T_MEMBER M
        WHERE M.IS_ACTIVATED = 'Y'
    </select>
    <select id="expiredMemberCount" resultType="_int">
        SELECT COUNT(*)
        FROM T_MEMBER M
                 JOIN T_EMPLOYEE E on M.EMP_NO = E.EMP_NO
        WHERE E.IS_EXPIRE = 'Y' AND M.IS_ACTIVATED = 'Y'
    </select>

<!-- 검색 기능 추가  -->
    <select id="searchMemberCount" resultType="_int">
        SELECT COUNT(*)
        FROM T_MEMBER M
        JOIN T_EMPLOYEE E ON (M.EMP_NO = E.EMP_NO)
        WHERE M.IS_ACTIVATED = 'Y'
        <if test="keyword != null and !keyword.isEmpty()">
            AND (
            E.EMP_NO LIKE CONCAT('%', #{keyword}, '%')
            OR E.EMP_NAME LIKE CONCAT('%', #{keyword}, '%')
            OR E.EMP_EMAIL LIKE CONCAT('%', #{keyword}, '%')
            OR E.EMP_PHONE LIKE CONCAT('%', #{keyword}, '%')
            )
        </if>
    </select>
    <select id="searchMemberList" resultMap="memberListResultMap">
        SELECT *
        FROM ( SELECT rownum AS rnum
                , M.EMP_NO
                , M.MEM_PWD
                , M.REGIST_DATE
                , M.POINT_BALANCE
                , E.EMP_NAME
                , E.EMP_EMAIL
                , E.EMP_PHONE
                , E.IS_EXPIRE
                , M.IS_ACTIVATED
                FROM T_MEMBER M
                JOIN T_EMPLOYEE E ON (M.EMP_NO = E.EMP_NO)
                WHERE M.IS_ACTIVATED = 'Y'
                <if test="keyword != null and !keyword.isEmpty()">
                    AND (
                    E.EMP_NO LIKE CONCAT('%', #{keyword}, '%')
                    OR E.EMP_NAME LIKE CONCAT('%', #{keyword}, '%')
                    OR E.EMP_EMAIL LIKE CONCAT('%', #{keyword}, '%')
                    OR E.EMP_PHONE LIKE CONCAT('%', #{keyword}, '%')
                    )
                </if>
            )
        WHERE rnum BETWEEN #{startRow} AND #{endRow}
        ORDER BY REGIST_DATE DESC
    </select>




    <!-- 계정 삭제 -->
    <delete id="deleteMember" parameterType="String">
        DELETE
        FROM T_MEMBER M
        WHERE M.EMP_NO = #{empNo}
    </delete>


    <!--  2. 회원등록  -->
    <select id="getEmployeeList" resultMap="employeeListResultMap" parameterType="hashmap">
        select * from
            (SELECT
--            row_number() OVER (ORDER BY E.EMP_NO DESC) AS rnum
--            위는 버튼 확인을 위해 일부러 정렬 순서를 바꾼것. 원래 입사일 내림차순이 맞음
                 row_number() OVER (ORDER BY E.HIRE_DATE DESC) AS rnum
                  ,E.EMP_NO
                  ,E.EMP_NAME
                  ,E.EMP_EMAIL
                  ,E.EMP_PHONE
                  ,D.DEPT_NAME
                  ,J.JOB_NAME
                  ,E.HIRE_DATE
                  ,M.REGIST_DATE
             FROM T_EMPLOYEE E
                      LEFT JOIN T_MEMBER M ON (E.EMP_NO = M.EMP_NO)
                      JOIN T_DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_CODE)
                      JOIN T_JOB J ON (E.JOB_CODE = J.JOB_CODE)
             WHERE E.IS_EXPIRE = 'N' AND E.EMP_NO LIKE 'E%')
--              AND M.REGIST_DATE IS NULL)
        WHERE rnum BETWEEN #{startRow} AND #{endRow}
    </select>

    <select id="totalEmployeeCount" resultType="_int">
        SELECT
            COUNT(*)
        FROM T_EMPLOYEE E
        WHERE E.IS_EXPIRE = 'N' AND E.EMP_NO LIKE 'E%'
    </select>

    <insert id="registMember" parameterType="com.hielectro.welpair.member.model.dto.MemberDTO">
        INSERT INTO T_MEMBER
        VALUES
            (
                #{ empNo }
            , #{ memPwd }
            , sysdate
            , default
            , default
            )
    </insert>
    <insert id="regisMemberRole" parameterType="String">
        INSERT INTO T_MEMBER_ROLE
            (MEM_NO, AUTH_CODE)
        VALUES
            (#{ empNo }, 2)
    </insert>



    <!-- 3. 가입승인 - 가입요청 목록 -->
    <!--    <select id="reqList" resultMap="reqListResultMap">-->
    <!--        SELECT M.REGIST_DATE, M.EMP_NO, E.EMP_NAME, E.EMP_EMAIL-->
    <!--        FROM T_MEMBER M-->
    <!--        JOIN T_EMPLOYEE E ON (M.EMP_NO = E.EMP_NO)-->
    <!--        WHERE M.IS_ACTIVATED = 'N'-->
    <!--        ORDER BY M.REGIST_DATE DESC-->
    <!--        LIMIT #{ offset }, #{ pageSize }-->
    <!--    </select>-->
    <!-- 새로운 페이징 처리 테스트  -->
    <select id="reqList" resultMap="reqListResultMap" parameterType="hashmap">-->
    SELECT REGIST_DATE, EMP_NO, EMP_NAME, EMP_EMAIL
    FROM (
             SELECT M.REGIST_DATE, M.EMP_NO, E.EMP_NAME, E.EMP_EMAIL, ROWNUM AS rnum
             FROM T_MEMBER M
                      JOIN T_EMPLOYEE E ON M.EMP_NO = E.EMP_NO
             WHERE M.IS_ACTIVATED = 'N'
             ORDER BY M.REGIST_DATE DESC
         )
    WHERE rnum BETWEEN #{startRow} AND #{endRow}
    </select>


    <!--  신규가입요청 수  -->
    <select id="reqJoinCount" resultType="_int" parameterType="hashmap">
        SELECT COUNT(*) FROM T_MEMBER M
        WHERE M.IS_ACTIVATED = 'N'
    </select>
    <!--  승인버튼  -->
    <update id="updateForPermission" parameterType="String">
        UPDATE T_MEMBER M
        SET M.REGIST_DATE = SYSDATE
          , M.IS_ACTIVATED = 'Y'
        WHERE M.EMP_NO = #{ empNo }
    </update>


    <!-- 4. 포인트 지급 - 근속연수를 포함한 회원목록 -->
    <select id="getMemberListforPoint" resultMap="memberListResultMap" parameterType="hashmap">
        SELECT * FROM
        (
            SELECT row_number() OVER (ORDER BY
                                        <if test="sortYears == 'asc'">YEAR_COUNT ASC</if>
                                        <if test="sortYears == 'desc'">YEAR_COUNT DESC</if>
                                      ) AS rnum,
            TMP.* FROM (
                            SELECT
                            M.EMP_NO,
                            E.EMP_NAME,
                            E.EMP_EMAIL,
                            E.EMP_PHONE,
                            D.DEPT_NAME,
                            J.JOB_NAME,
                            E.HIRE_DATE,
                            M.REGIST_DATE,
                            CEIL(MONTHS_BETWEEN(SYSDATE, E.HIRE_DATE) / 12) AS YEAR_COUNT
                            FROM T_MEMBER M
                            JOIN T_EMPLOYEE E ON (M.EMP_NO = E.EMP_NO)
                            JOIN T_DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_CODE)
                            JOIN T_JOB J ON (E.JOB_CODE = J.JOB_CODE)
                            WHERE M.IS_ACTIVATED = 'Y' AND E.IS_EXPIRE = 'N'
                            <if test="deptType != 'all'">AND E.DEPT_CODE = #{deptType}</if>
                            <if test="jobType != 'all'">AND E.JOB_CODE = #{jobType}</if>
                        ) TMP
        ) RESULT
        WHERE rnum BETWEEN #{startRow} AND #{endRow}
    </select>


    <!-- 포인트 지급이력 테이블 인서트  -->
    <insert id="insertPointHistory" parameterType="com.hielectro.welpair.member.model.dto.PointHistoryDTO">
        INSERT INTO T_POINT_HISTORY
        (POINT_NO, EMP_NO, POINT_DATE, POINT_AMOUNT, POINT_TYPE, POINT_REASON, EVENT_ID)
        VALUES
            (
                'PH' || LPAD(SEQ_POINT_NO.NEXTVAL, 10, 0),
                #{empNo},
                SYSDATE,
                #{selectedAmount},
                '적립',
                #{selectedReason},
                #{eventId}
            )
    </insert>
    <select id="getNextEventId" resultType="_int">
        SELECT SEQ_EVENT_ID.NEXTVAL
        FROM DUAL
    </select>
    <select id="getCurrEventId" resultType="_int">
        SELECT SEQ_EVENT_ID.CURRVAL
        FROM DUAL
    </select>

    <!-- 회원의 포인트잔액 업데이트  -->
    <update id="updatePointBalance" parameterType="hashmap">
        UPDATE T_MEMBER
        SET POINT_BALANCE = POINT_BALANCE + #{ selectedAmount }
        WHERE EMP_NO = #{ empNo }
    </update>


    <!-- 5. 포인트지급이력(요약) -->
    <select id="pointHistorySummary" resultMap="pointHistoryResultMap" parameterType="hashmap">
        SELECT *
        FROM (SELECT row_number() OVER (ORDER BY P.EVENT_ID DESC) AS rnum,
                     P.EVENT_ID,
                     MIN(P.POINT_DATE) AS "POINT_DATE2",
                P.POINT_REASON,
                COUNT(DISTINCT P.EMP_NO) AS "POINT_COUNT",
                SUM(P.POINT_AMOUNT) AS "POINT_TOTAL"
              FROM T_POINT_HISTORY P
              GROUP BY P.EVENT_ID, P.POINT_REASON
--               ORDER BY P.EVENT_ID DESC
              )
        WHERE rnum BETWEEN #{startRow} AND #{endRow}
    </select>

<!--  페이징처리를 위해 지급이력(요약) 총 항목수 조회  -->
    <select id="pointHistorySummaryCount" resultType="_int">
        SELECT
            COUNT(DISTINCT P.EVENT_ID)
        FROM T_POINT_HISTORY P
    </select>



    <!-- 포인트지급이력(상세) -->
<!--    <select id="pointHistoryDetail" resultMap="pointHistoryResultMap">-->
<!--        SELECT-->
<!--            P.POINT_NO-->
<!--             ,P.EMP_NO-->
<!--             ,P.POINT_DATE-->
<!--             ,P.POINT_AMOUNT-->
<!--             ,P.POINT_TYPE-->
<!--             ,P.POINT_REASON-->
<!--             ,P.EVENT_ID-->
<!--             ,E.EMP_NAME, D.DEPT_NAME, J.JOB_NAME-->
<!--             ,CEIL(MONTHS_BETWEEN(SYSDATE, E.HIRE_DATE) / 12) AS "YEAR_COUNT"-->
<!--        FROM T_POINT_HISTORY P-->
<!--            JOIN T_MEMBER M ON (P.EMP_NO = M.EMP_NO)-->
<!--            JOIN T_EMPLOYEE E ON (M.EMP_NO = E.EMP_NO)-->
<!--            JOIN T_DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_CODE)-->
<!--            JOIN T_JOB J ON (E.JOB_CODE = J.JOB_CODE)-->
<!--        WHERE P.EVENT_ID = #{ eventId }-->
<!--        ORDER BY P.EMP_NO-->
<!--    </select>-->

    <select id="pointHistoryDetail" resultMap="pointHistoryResultMap" parameterType="hashmap">
        SELECT *
        FROM (SELECT row_number() OVER (ORDER BY P.EMP_NO) AS rnum,
                P.POINT_NO
                 ,P.EMP_NO
                 ,P.POINT_DATE
                 ,P.POINT_AMOUNT
                 ,P.POINT_TYPE
                 ,P.POINT_REASON
                 ,P.EVENT_ID
                 ,E.EMP_NAME, D.DEPT_NAME, J.JOB_NAME
                 ,CEIL(MONTHS_BETWEEN(SYSDATE, E.HIRE_DATE) / 12) AS "YEAR_COUNT"
            FROM T_POINT_HISTORY P
                JOIN T_MEMBER M ON (P.EMP_NO = M.EMP_NO)
                JOIN T_EMPLOYEE E ON (M.EMP_NO = E.EMP_NO)
                JOIN T_DEPARTMENT D ON (E.DEPT_CODE = D.DEPT_CODE)
                JOIN T_JOB J ON (E.JOB_CODE = J.JOB_CODE)
            WHERE P.EVENT_ID = #{ eventId }
            )
        WHERE rnum BETWEEN #{startRow} AND #{endRow}
    </select>

    <!--  페이징처리를 위해 지급이력(상세) 총 항목수 조회  -->
    <select id="pointHistoryDetailCount" resultType="_int">
        SELECT COUNT(*)
        FROM T_POINT_HISTORY
        WHERE EVENT_ID = #{ eventId }
    </select>


</mapper>